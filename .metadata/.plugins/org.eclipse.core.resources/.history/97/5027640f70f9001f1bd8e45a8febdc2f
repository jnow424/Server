새 프로젝트
- New > Dynamic Web Project
      > Project name: "JSPTest"
      > Context root: "jsp"
      > web.xml: 체크(O)

서블릿
- 알바생

JSP 
- 알바생
- 서블릿

- webapp > "ex01.jsp"


JSP 구성 요소

1. JSP 지시자, JSP Directive
    - <%@ %>
    a. page 지시자
    b. include 지시자
    c. taglib 지시자

2. 스크립트 요소, Scripting Elements
    - <% %>
    a. 스크립틀릿
    b. 익스프레션(표현식)
    c. 선언부

3. 액션 태그, Action Tags
    - <jsp:XXX>, <c:XXX>
    - 기본 액션 태그
    - 확장 액션 태그
    - 사용자 정의 액션 태그
    


a. page 지시자
- webapp > "ex02.jsp"
- JSP 페이지 실행 환경 > 톰캣에게 알려준다.
- JSP 페이지 첫줄에 작성
- 1개 이상 작성 가능

- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
    a. page
        - 키워드
    b. language="java"
        - JSP 페이지에서 사용할 프로그래밍 언어 지정
    c. contentType="text/html; charset=UTF-8"
        - JSP 페이지의 콘텐츠에 대한 기술
        - text/html: MIME 타입 > HTML 문서 > 브라우저에게 전달
        - charset=UTF-8: 인코딩 > HTML 문서 > 브라우저에게 전달
    d. pageEncoding="UTF-8"
        - 현재 JSP 페이지의 인코딩
      
      
b. include 지시자
- "ex03.jsp"
- webapp > "inc" > "copyright.jsp"
      


a. 스크립틀릿
- <% %>
- Script + Applet
- HTML 영역에서 Java 문법을 사용 가능하게 하는 영역을 제공
- "ex04.jsp"

b. 익스프레션(표현식)
- <%= %>
- 자바의 값을 HTML 문서에 출력하는 역할
- System.out.print() 역할
- 브라우저에 화면에 출력하는 것이 아니다.(***) > HTML 문서에 출력!!
- "ex05.jsp"
- "ex06.jsp"


c. 선언부
- <%! %>
- "ex08.jsp"
- "com.test.java" > "MyUtil.java"



JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도, 톰캣이 미리 만들어서 제공하는 객체 
- 예약어(키워드)로 제공
- request, response, session, pageContext
- out, application
- config, page, exception 등

*** pageContext, request, session, application
    - 객체 내부에 사용자 데이터를 저장할 수 있는 컬렉션(Map)을 가지고 있다.
    - void setAttribute(String key, Object value)
    - Object getAttribute(String key)


request
- HttpServletRequest
- 서블릿의 doGet/doPost의 첫번째 매개변수와 동일

1. 클라이언트에서 서버로 전송한 데이터를 가져오기
    - "ex09_form.jsp" //send
    - "ex09_ok.jsp"   //receive
    
    - "ex10_form.jsp"
    - "ex10_ok.jsp"


response
- HttpServletResponse
- 서블릿의 doGet/doPost의 두번째 매개변수와 동일



















