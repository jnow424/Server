새 프로젝트
- New > Dynamic Web Project
      > Project name: "JSPTest"
      > Context root: "jsp"
      > web.xml: 체크(O)

서블릿
- 알바생

JSP 
- 알바생
- 서블릿

- webapp > "ex01.jsp"


JSP 구성 요소

1. JSP 지시자, JSP Directive
    - <%@ %>
    a. page 지시자
    b. include 지시자
    c. taglib 지시자

2. 스크립트 요소, Scripting Elements
    - <% %>
    a. 스크립틀릿
    b. 익스프레션(표현식)
    c. 선언부

3. 액션 태그, Action Tags
    - <jsp:XXX>, <c:XXX>
    - 기본 액션 태그
    - 확장 액션 태그
    - 사용자 정의 액션 태그
    


a. page 지시자
- webapp > "ex02.jsp"
- JSP 페이지 실행 환경 > 톰캣에게 알려준다.
- JSP 페이지 첫줄에 작성
- 1개 이상 작성 가능

- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
    a. page
        - 키워드
    b. language="java"
        - JSP 페이지에서 사용할 프로그래밍 언어 지정
    c. contentType="text/html; charset=UTF-8"
        - JSP 페이지의 콘텐츠에 대한 기술
        - text/html: MIME 타입 > HTML 문서 > 브라우저에게 전달
        - charset=UTF-8: 인코딩 > HTML 문서 > 브라우저에게 전달
    d. pageEncoding="UTF-8"
        - 현재 JSP 페이지의 인코딩
      
      
b. include 지시자
- "ex03.jsp"
- webapp > "inc" > "copyright.jsp"
      


a. 스크립틀릿
- <% %>
- Script + Applet
- HTML 영역에서 Java 문법을 사용 가능하게 하는 영역을 제공
- "ex04.jsp"

b. 익스프레션(표현식)
- <%= %>
- 자바의 값을 HTML 문서에 출력하는 역할
- System.out.print() 역할
- 브라우저에 화면에 출력하는 것이 아니다.(***) > HTML 문서에 출력!!
- "ex05.jsp"
- "ex06.jsp"


c. 선언부
- <%! %>
- "ex08.jsp"
- "com.test.java" > "MyUtil.java"



JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도, 톰캣이 미리 만들어서 제공하는 객체 
- 예약어(키워드)로 제공
- request, response, session(***), pageContext
- out, application
- config, page, exception 등

*** pageContext, request, session, application
	- 객체 내부에 사용자 데이터를 저장할 수 있는 컬렉션(Map)을 가지고 있다.
	- void setAttribute(String key, Object value)
	- Object getAttribute(String key)


request
- HttpServletRequest
- 서블릿의 doGet/doPost의 첫번째 매개변수와 동일

1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	- "ex09_form.jsp" //send
	- "ex09_ok.jsp"   //receive
	
	- "ex10_form.jsp"
	- "ex10_ok.jsp"
	
	- "ex11_form.jsp"
	- "ex11_ok.jsp"
	
	- "ex12_form.jsp"
	- "ex12_ok.jsp"
	
	- "ex13_request.jsp"

2. 클라이언트에서 서버로 전송한 데이터의 인코딩 처리

3. 클라이언트에서 서버로 요청 시 정보를 가져오기



response
- HttpServletResponse
- 서블릿의 doGet/doPost의 두번째 매개변수와 동일
- 주로 서버측에서 클라이언트측으로 발생하는 업무를 담당

1. 돌려줄 HTML 페이지를 생성
	- response.getWriter() > PrintWriter > HTML 제작
	- 서블릿 > 구현(O)
	- JSP > 구현(X) > 내부적으로 자동 구현(O)

2. 돌려줄 HTML 페이지 인코딩 설정
	- response.setCharacterEncoding("UTF-8");
	- 서블릿 > 구현(O)
	- JSP > 페이지 지시자 > contentType="text/html; charset=UTF-8"

3. 돌려줄 HTML 페이지 MIME 설정
	- contentType="text/html;"

4. 페이지 이동하기
	- "ex14_response_1.jsp"
	- "ex14_response_2.jsp"
		

서블릿/JSP 동작 방식
- 요청 ~ 응답까지 벌어지는 일들..

서블릿 동작 방식
- com.test.java > "Test.java"


pageContext
- "ex15_pagecontext_1.jsp"
- "ex15_pagecontext_2.jsp"
- "ex15_pagecontext.jsp"



out
- 출력 객체
- JSP 방식이 아닌 Servlet 방식의 출력을 지원하는 객체
- 서블릿의 PrintWriter 역할(+ 기능)
- "ex16_out.jsp"


session, application
- 세션: 클라이언트(브라우저 사용자)가 서버에 접속~나갈때까지의 간격
- 객체 입장으로서의 역할

- "ex17_session.jsp"
- "ex17_session_2.jsp"

- "ex18_session.jsp" //메인 페이지
- "ex18_set.jsp"
- "ex18_del.jsp"
- "ex18_interval.jsp"
- "ex18_reset.jsp"


내장 객체의 생명 주기
- pageContext, request, session, application
- 내부 컬렉션 사용 가능 객체

- pageContext: 생성(페이지 요청) ~ 소멸(페이지 반환)
- request: 생성(페이지 요청) ~ 소멸(페이지 반환)
           생성(처음 페이지 요청) ~ 페이지 이동(forward) ~ 소멸(다음 페이지 반환)
- session: 생성(처음 방문 시) ~ 소멸(최종 접속 후 30분 미접속)
- application: 생성(첫번째 사용자 접속) ~ 소멸(마지막 사용자 세션 소멸)           
           


파일 업로드/다운로드

단일 파일 업로드
- "ex19_form.jsp"
- "ex19_ok.jsp"

다중 파일 업로드
- "ex20_form.jsp"
- "ex20_ok.jsp"


갤러리(이미지 뷰어)
- "ex21.jsp" 	//메인 페이지(읽기)
- "ex21_ok.jsp" //업로드 처리 페이지(쓰기)
- "ex21_del.jsp"//삭제 처리 페이지(지우기)

- "ex22.jsp"
- "ex22_ok.jsp"
- "ex22_del.jsp"




EL + JSTL
- 더 이상 JSP 페이지에서 자바 문법을 사용하지 말자!! > 가독성

EL, Expression Language
- "ex23_el.jsp"

JSTL, Java Standard Tag Library
- "ex24_jstl.jsp"



쿠키, Cookie
- 브라우저의 기능 중 하나 > 데이터 저장소
- JavaScript or 서버 언어(Java) > 접근 + 조작
- 용도: 사용자(브라우저)가 특정 웹사이트 접속 > 웹사이트측에서 접속한 사용자에 대한 개인 정보를 저장하기 위한 장치 > 사용자의 컴퓨터에 저장한다.(***) > 사용자에 대한 여러가지 정보를 지속으로 유지/관리

쿠키 vs 세션
- 개인적인 공간
- 특정 페이지에 종속되지 않는다. > 페이지간에 전달이 자유롭다.

세션
- 서버 메모리에 생성
- 자바 > 저장 가능한 자료형 > Object
- 보안 양호
- 크기 무제한(메모리가 허락하는 한도내에서)

쿠키
- 클라이언트 메모리에 생성 or 클라이언트 하드 디스크에 생성
- 저장 가능한 자료형 > 문자열(텍스트 형식)
- 보안 불안정
- 최대 4KB
- 도메인 당 최대 개수 > 20개 > 총합 300개까지

- "ex25_cookie_1.jsp"
- "ex25_cookie_2.jsp"

쿠키의 만료시간(종류)
1. 메모리 쿠키(세션 쿠키)
	- 만료 시간 미지정 
	- 브라우저가 포함된 프로세스내의 메모리에 저장
	- 브라우저가 종료되면 쿠키도 같이 삭제(= 세션과 동일)
	
2. 하드 쿠키
	- 만료 시간 지정 > 정해진 시간전까지 쿠키를 계속 유지 > HDD(SSD)에 저장한다.(*.txt)

- "ex26_cookie_1.jsp"
- "ex26_cookie_2.jsp"
- "ex26_cookie_3.jsp"


쿠키의 사용 목적
1. 개인 정보 > 지속적으로 유지(오늘~내일~)
2. 개인 정보 > 페이지간의 공유(사이트 전역 변수 역할)
3. 자료형 > 문자열(4KB)

세션의 사용 목적
2. 개인 정보 > 페이지간의 공유(사이트 전역 변수 역할)
3. 자료형 > Object











=========================================

톰캣  // 클라이언트 코드로 읽음 > 처리
		> HTML 
		> 브라우저 // 주석을 읽음

//Grid(표)JavaScript Grid
//Calendar(달력)full calendar
//Google Chart















